@robberWidth: 80%;
@robberHeight: 100%;
@robberBorder: 6%;
@robberHeadHeight: 30%;
@robberHeadWidth: 50%;

@roadWidth: 10%;
@roadLength: 60%;
@roadBorder: 10%;

@vertexSize: 20%;
@settlementWidth: 80%;
@settlementHeight: 80%;
@settlementRoof: @settlementHeight * 0.4;
@settlementBorder: 6%;

@cityWidth: 100%;
@cityHeight: 100%;
@cityTowerHeight: @cityHeight * 0.3;
@cityTowerWidth: @cityWidth * 0.6;
@cityRoof: @cityHeight * 0.2;
@cityBorder: 6%;


#grid {
  max-width: 100%;
  max-height: 100%;
  font-size: 0;
  margin: auto;

  > .gridRow {
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    white-space: nowrap;

    > .hex, .gridRowSpacer, .hexSpacer {
      display: inline-block;
      height: 100%;
      aspect-ratio: cos( 30deg );
      margin: 0;
      font-size: initial;
    }

    /*.hex:before {
      content: "";
      position: absolute;
      clip-path: polygon( 0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0% );
      //background-color: green;
    }*/

    > .gridRowSpacer, .hexSpacer {
      background-color: transparent;
      width: 0 !important;
    }

    > .gridRowSpacer {
      //aspect-ratio: 0.5 * cos( 30deg );
    }
  }
}

.hex {
  position: relative;
  overflow: visible;
  background-size: cover;

  /*> .hexBackground {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: -1;
  }*/

  > .hexRow1, .hexRow3 {
    width: 100%;
    height: 25%;
  }

  .hexRow2 {
    width: 100%;
    height: 50%;

    > .hexCell3, .hexCell5 {
      width: @roadWidth;
    }

    > .hexCell3 {
      margin-left: 0 - @roadWidth / 2;
    }

    > .hexCell4 {
      width: auto;
      position: relative;
      float: none;
      margin: 0 @roadWidth / 2 0 @roadWidth / 2;

      .buildPlacementPoint {
        top: -8%;
        width: 20%;
      }
    }

    > .hexCell5 {
      float: right;
      margin-right: 0 - @roadWidth / 2;
    }

  }

  .hexCell {
    height: 100%;
    width: 50%;
    float: left;
  }

  .placementBorder {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 5;
    background-color: black;
  }

  .placementContent {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 10;
  }

  .buildPlacementPoint {
    @color: #D09029;

    aspect-ratio: 1;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate( -50%, -50% );
    background-color: transparent;
    border: solid 0.2rem @color;
    border-radius: 100%;
    transition: 0.1s ease-in-out;
    z-index: 20;

    &:hover {
      box-shadow: inset 0 0 8px @color;
      text-decoration: initial !important;
    }

    &:active {
      box-shadow: inset 0 0 16px @color;
    }
  }

  .resourceNumber {
    width: 40%;
    aspect-ratio: 1;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate( -50%, -50% );
  }
}

.structure {
  width: 100%;
  height: 100%;
}

.structureBuilt {
  display: block;
}

.structureNotBuilt {
  display: none;
}


#robber {
  aspect-ratio: 1;
  position: absolute;
  width: 23%;
  left: 50%;
  top: -8%;
  transform: translate( -50%, -50% );
  z-index: 18;

  @robberGapX: ( 100% - @robberWidth ) / 2;
  @robberGapY: ( 100% - @robberHeight ) / 2;
  @robberHeadGap: ( 100% - @robberHeadWidth ) / 2;

  .placementBorder {
    clip-path: polygon(
            100% - @robberGapX          100% - @robberGapY,
            @robberGapX                 100% - @robberGapY,
            @robberGapX                 @robberGapY + @robberHeadHeight,
            @robberHeadGap              @robberGapY + @robberHeadHeight,
            @robberHeadGap              @robberGapY,
            100% - @robberHeadGap       @robberGapY,
            100% - @robberHeadGap       @robberGapY + @robberHeadHeight,
            100% - @robberGapX          @robberGapY + @robberHeadHeight
    );
  }

  .placementContent {
    background-color: #586572;
    clip-path: polygon(
            100% - @robberGapX - @robberBorder      100% - @robberGapY - @robberBorder,
            @robberGapX + @robberBorder             100% - @robberGapY - @robberBorder,
            @robberGapX + @robberBorder             @robberGapY + @robberHeadHeight + @robberBorder,
            @robberHeadGap + @robberBorder          @robberGapY + @robberHeadHeight + @robberBorder,
            @robberHeadGap + @robberBorder          @robberGapY + @robberBorder,
            100% - @robberHeadGap - @robberBorder   @robberGapY + @robberBorder,
            100% - @robberHeadGap - @robberBorder   @robberGapY + @robberHeadHeight + @robberBorder,
            100% - @robberGapX - @robberBorder      @robberGapY + @robberHeadHeight + @robberBorder
    );
  }
}


@roadGap: ( 100% - @roadLength ) / 2;
.road {
  position: relative;
  width: 100%;
  height: 100%;
  //filter: url( #buildingFilter );

  .buildPlacementPoint {
    width: 40%;
  }

  @roadXMult: cos( 30deg );
  @roadYMult: sin( 30deg );
  @roadWidthX: @roadWidth / 0.5 / 2 * @roadYMult;
  @roadWidthY: @roadWidth * cos( 30deg ) * 4 / 2 * @roadXMult;
  @roadBorderX1: @roadBorder * @roadWidth / 100 / 0.5 * @roadXMult;
  @roadBorderX2: @roadBorder * @roadWidth / 100 / 0.5 * @roadYMult;
  @roadBorderY1: @roadBorder * @roadWidth / 100 * cos( 30deg ) / 0.25 * @roadYMult;
  @roadBorderY2: @roadBorder * @roadWidth / 100 * cos( 30deg ) / 0.25 * @roadXMult;

  &.roadSW {
    .placementBorder {
      clip-path: polygon(
              @roadGap + @roadWidthX              @roadGap - @roadWidthY,
              ( 100% - @roadGap ) + @roadWidthX   ( 100% - @roadGap ) - @roadWidthY,
              ( 100% - @roadGap ) - @roadWidthX   ( 100% - @roadGap ) + @roadWidthY,
              @roadGap - @roadWidthX              @roadGap + @roadWidthY
      );
    }

    .placementContent {
      clip-path: polygon(
              @roadGap + @roadWidthX + @roadBorderX1 - @roadBorderX2          @roadGap - @roadWidthY + @roadBorderY1 + @roadBorderY2,
              100% - @roadGap + @roadWidthX - @roadBorderX1 - @roadBorderX2   100% - @roadGap - @roadWidthY - @roadBorderY1 + @roadBorderY2,
              100% - @roadGap - @roadWidthX - @roadBorderX1 + @roadBorderX2   100% - @roadGap + @roadWidthY - @roadBorderY1 - @roadBorderY2,
              @roadGap - @roadWidthX + @roadBorderX1 + @roadBorderX2          @roadGap + @roadWidthY + @roadBorderY1 - @roadBorderY2
      );
    }
  }

  &.roadSE {
    .placementBorder {
      clip-path: polygon(
              @roadGap - @roadWidthX              ( 100% - @roadGap ) - @roadWidthY,
              ( 100% - @roadGap ) - @roadWidthX   @roadGap - @roadWidthY,
              ( 100% - @roadGap ) + @roadWidthX   @roadGap + @roadWidthY,
              @roadGap + @roadWidthX              ( 100% - @roadGap ) + @roadWidthY
      );
    }

    .placementContent {
      clip-path: polygon(
              @roadGap - @roadWidthX + @roadBorderX1 + @roadBorderX2              ( 100% - @roadGap ) - @roadWidthY - @roadBorderY1 + @roadBorderY2,
              ( 100% - @roadGap ) - @roadWidthX - @roadBorderX1 + @roadBorderX2   @roadGap - @roadWidthY + @roadBorderY1 + @roadBorderY2,
              ( 100% - @roadGap ) + @roadWidthX - @roadBorderX1 - @roadBorderX2   @roadGap + @roadWidthY + @roadBorderY1 - @roadBorderY2,
              @roadGap + @roadWidthX + @roadBorderX1 - @roadBorderX2              ( 100% - @roadGap ) + @roadWidthY - @roadBorderY1 - @roadBorderY2
      );
    }
  }

  &.roadE {
    .buildPlacementPoint {
      width: 200%;
    }

    .placementBorder {
      clip-path: polygon(
              0     @roadGap,
              100%  @roadGap,
              100%  100% - @roadGap,
              0%    100% - @roadGap
      );
    }

    @roadBorderY: @roadBorder * @roadWidth / 100 * cos( 30deg ) / 0.5;
    .placementContent {
      clip-path: polygon(
              @roadBorder         @roadGap + @roadBorderY,
              100% - @roadBorder  @roadGap + @roadBorderY,
              100% - @roadBorder  100% - @roadGap - @roadBorderY,
              @roadBorder         100% - @roadGap - @roadBorderY
      );
    }
  }
}





.vertex {
  position: absolute;
  width: @vertexSize;
  height: @vertexSize * cos( 30deg );
  z-index: 15;

  .vertexContent {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .buildPlacementPoint {
    width: 100%;
  }

  &.vertexS {
    left: 50% - @vertexSize / 2;
    //margin-left: 0 - @vertexSize / 2;
    bottom: 0 - @vertexSize / 2;
  }

  &.vertexSE {
    right: 0 - @vertexSize / 2;
    top: 75% - @vertexSize / 2;
    //margin-top: 0 - @vertexSize / 2;
  }

  .settlement {
    @settlementGapX: ( 100% - @settlementWidth ) / 2;
    @settlementGapY: ( 100% - @settlementHeight ) / 2;
    @roofAngle: atan( @settlementRoof / ( @settlementWidth / 2 ) );
    @settlementRoofBorderY: @settlementBorder * cos( @roofAngle );
    @settlementTipBorderY: @settlementBorder / cos( @roofAngle );

    .placementBorder {
      clip-path: polygon(
              100% - @settlementGapX                    100% - @settlementGapY,
              @settlementGapX                           100% - @settlementGapY,
              @settlementGapX                           @settlementGapY + @settlementRoof,
              @settlementGapX + @settlementWidth / 2    @settlementGapY,
              100% - @settlementGapX                    @settlementGapY + @settlementRoof
      );
    }

    .placementContent {
      clip-path: polygon(
              100% - @settlementGapX - @settlementBorder    100% - @settlementGapY - @settlementBorder,
              @settlementGapX + @settlementBorder           100% - @settlementGapY - @settlementBorder,
              @settlementGapX + @settlementBorder           @settlementGapY + @settlementRoof + @settlementRoofBorderY,
              @settlementGapX + @settlementWidth / 2        @settlementGapY + @settlementTipBorderY,
              100% - @settlementGapX - @settlementBorder    @settlementGapY + @settlementRoof + @settlementRoofBorderY
      );
    }
  }

  .city {
    @cityGapX: ( 100% - @cityWidth ) / 2;
    @cityGapY: ( 100% - @cityHeight ) / 2;
    @roofAngle: atan( @cityRoof / ( @cityTowerWidth / 2 ) );
    @cityRoofBorderY: @cityBorder * cos( @roofAngle );
    @cityTipBorderY: @cityBorder / cos( @roofAngle );

    .placementBorder {
      clip-path: polygon(
              100% - @cityGapX                        100% - @cityGapY,
              @cityGapX                               100% - @cityGapY,
              @cityGapX                               @cityGapY + @cityRoof + @cityTowerHeight,
              100% - @cityGapX - @cityTowerWidth      @cityGapY + @cityRoof + @cityTowerHeight,
              100% - @cityGapX - @cityTowerWidth      @cityGapY + @cityRoof,
              100% - @cityGapX - @cityTowerWidth / 2  @cityGapY,
              100% - @cityGapX                        @cityGapY + @cityRoof
      );
    }

    .placementContent {
      clip-path: polygon(
              100% - @cityGapX - @cityBorder                    100% - @cityGapY - @cityBorder,
              @cityGapX + @cityBorder                           100% - @cityGapY - @cityBorder,
              @cityGapX + @cityBorder                           @cityGapY + @cityRoof + @cityTowerHeight + @cityBorder,
              100% - @cityGapX - @cityTowerWidth + @cityBorder  @cityGapY + @cityRoof + @cityTowerHeight + @cityBorder,
              100% - @cityGapX - @cityTowerWidth + @cityBorder  @cityGapY + @cityRoof + @cityRoofBorderY,
              100% - @cityGapX - @cityTowerWidth / 2            @cityGapY + @cityTipBorderY,
              100% - @cityGapX - @cityBorder                    @cityGapY + @cityRoof + @cityRoofBorderY
      );
    }
  }
}